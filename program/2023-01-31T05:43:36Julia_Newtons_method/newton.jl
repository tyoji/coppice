
##### ##### ##### ##### ##### ##### ##### ##### ##### #####
#  f(x)=x^3-2x+2 と定義する。
#  Newton法で方程式 f(x)=0 の実数解の近似値を計算することを考える。
#  Newton法とは、与えられた初期値 x_0 に対して、次の漸化式により反復計算を行う手法である。
#   x_{n+1}=x_{n} - f(x_{n}) / f'(x_{n})  (n >= 0)
#
#  方程式 f(x)=0 はただ一つの実数解
#     a = ( -1 + sqrt(19/27) )^(1/3) + ( -1 - sqrt(19/27) )^(1/3)
#  を持つことは既知として、以下の問いに答えよ。
##### ##### ##### ##### ##### ##### ##### ##### ##### #####

# 精度を 2600 bits に設定
setprecision(2600)

    # f(x) の定義
f1(x) = x^3-2*x+2
    # f(x) の導関数
f2(x) = 3*x^2 -2
    # 実数解 cbrt関数は3乗根の計算
a = cbrt( -1 + sqrt(big(19/27)) ) + cbrt( -1 - sqrt(big(19/27)) )
println("=== 方程式の解 ===")
println(a)

##### ##### ##### ##### ##### ##### ##### ##### ##### #####
# ### ( 1 ) ###
#        漸化式を用いて、 x_1,x_2,\dots を反復的に計算する関数 newton(x0) を、Julia言語で次の要件を満たすように作成せよ。
#         ## 1 ##  引数 x0 を初期値とすること
#         ## 2 ##  f'(x_n)=0 のとき、反復計算を終了する
#         ## 3 ##  各 n >= 0 に対して、[ x_n の値] と [ 誤差 | x_n-a | ] を表示する
#         ## 4 ##  x_{n+1} を計算した時点で、| x_{n+1} - x_n | <10^{-6} が満たされているならば、反復計算を終了する
#
#        各要件がプログラムコードのどこの部分に該当するのかを明記し、プログラムに関する説明を必ず記述すること。
##### ##### ##### ##### ##### ##### ##### ##### ##### #####

function newton(x)
    # 引数 x を初期値とする ## 1 ##
    i=0
    while true
        println(i, "回目")
        # 計算の都度 近似解とその誤差を表示 ## 3 ##
        println("+-- x の値")
        println(x)
        println("+-- aとの誤差")
        println(abs(x-a))
        # 分母の微分係数が 0 になれば終了 ## 2 ##
        if f2(x) == 0
            println("f'(x)=0 により終了")
            return 0
        end
        # 漸化式の計算
        y = x - f1(big(x))/f2(big(x))
        # 近似解の差が小さい場合終了 ## 4 ##
        if abs(y-x) < big(10)^(-6)
            println("近似解の差が小さいので終了")
            return 0
        end
        # 30回を超えたら中止
        if i > 30
            println("30回を超えたので中止")
            return 1
        end
        x=y # 近似解の項を次にセットする
        i += 1
    end
end


##### ##### ##### ##### ##### ##### ##### ##### ##### #####
# ### ( 2 ) ###
#        newton(-16) および newton(-2) の実行結果を示し、誤差や収束の様子について考察を述べよ。
##### ##### ##### ##### ##### ##### ##### ##### ##### #####

println(" [ [ [ newton(-16) を実行] ] ]")
newton(-16)

println("\n")

println(" [ [ [ newton(-2) を実行] ] ]")
newton(-2)

println("\n")


##### ##### ##### ##### ##### ##### ##### ##### ##### #####
# ### ( 3 ) ###
#        初期値 x0 を 0 に近い値に選び、newton(x0) の実行結果を示せ。
#        さらに、実行結果に関する考察を述べよ。
##### ##### ##### ##### ##### ##### ##### ##### ##### #####

println(" [ [ [ newton(-1) を実行] ] ]") # 7回で終了
newton(-1)

println("\n")

#println(" [ [ [ newton(1) を実行] ] ]") # 解が収束せず
#newton(1)

#println("\n")

#println(" [ [ [ newton(-0.1) を実行] ] ]") # 解が収束せず
#newton(-0.1)

#println("\n")

#println(" [ [ [ newton(0.1) を実行] ] ]") # 解が収束せず
#newton(0.1)


